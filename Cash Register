function checkCashRegister(price, cash, cid) {

  let bills = [0.01,0.05,0.1,0.25,1,5,10,20,100]
  let changeToGive = cash - price
  let change = 0
  let check = []

  if (changeInCashier(cid) == changeToGive){

    return {status: "CLOSED", change: cid }
    
  }

    for (let i = cid.length - 1; i >= 0; i--){

// The bill must be lower than the changeToGive 
          if ( bills[i] > changeToGive){

              continue

          }
// Checks cashiers' stock  of that bill and change must be lower than changeToGive
          while (change <= changeToGive && cid[i][1] > 0){

// The current change + another bill can't be higher than the changeToGive
          if ((change + bills[i]).toFixed(2) <= changeToGive ) {
// If it isnt, add the bill to the current change
              change += takeBill(cid[i], bills[i])
// And make the check        
              makeCheck(cid[i], bills[i], check)
              
          } else { break }
          
          }

    } 

// Lastly, change would only be lower than the ChangeToGive if it didnt have anough funds in the register
  if (change < changeToGive){

    return {status: "INSUFFICIENT_FUNDS", change: []}

  } 

  return {status: "OPEN", change: check};
}

console.log(checkCashRegister(3.26, 100, [["PENNY", 1.01], ["NICKEL", 2.05], ["DIME", 3.1], ["QUARTER", 4.25], ["ONE", 90], ["FIVE", 55], ["TEN", 20], ["TWENTY", 60], ["ONE HUNDRED", 100]]));


function makeCheck(arr, bill, check) {

    let bool = true

      check.forEach((currency) => {

          if(currency[0] == arr[0]){
            
             currency[1] += bill
             bool = false

          } 
      })

      if(bool){

        check.push([arr[0], bill])

      }
}


// Takes the cashier register and a bill. It returns the bill value and it also substracts that bill value on the cashiers register 
function takeBill (arr, bill) {

      arr[1] =  arr[1] - bill
    
      return bill

}

//Returns the sum of the cashier register change
function changeInCashier(arr){

  let sum = 0

    arr.forEach( (cash) => sum += cash[1])

return sum
}
